import string
import tkinter as tk
from ttkbootstrap import Style
from ttkbootstrap.constants import *
from tkinter import ttk, messagebox, filedialog

class StrongPasswordApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("🔐 Strong Password")
        self.geometry("700x500")
        self.style = Style("cyborg")  # Tema escuro moderno
        self.resizable(True, True)  # Permite maximizar

        # Containers (frames)
        self.tela_contexto = ttk.Frame(self)
        self.tela_senha = ttk.Frame(self)

        for frame in (self.tela_contexto, self.tela_senha):
            frame.place(relwidth=1, relheight=1)

        self.contexto_var = tk.StringVar()
        self.resultado_var = tk.StringVar()

        self.configurar_tela_contexto()
        self.configurar_tela_senha()

        self.mostrar_tela(self.tela_contexto)

    def mostrar_tela(self, frame):
        frame.tkraise()

    def configurar_tela_contexto(self):
        ttk.Label(self.tela_contexto, text="🔐 Escolha o contexto de uso da senha:", font=("Arial", 16)).pack(pady=20)
        
        botoes = [
            ("Sistema comum (8)", "🌐 Sistema comum"),
            ("Ambiente corporativo (12)", "🏢 Corporativo"),
            ("Acesso administrativo/sensível (16)", "🔒 Acesso sensível"),
            ("Wi-Fi pessoal (12)", "📶 Wi-Fi"),
            ("Outro (defina)", "🛠️ Personalizado")
        ]

        for valor, texto in botoes:
            ttk.Button(self.tela_contexto, text=texto, width=30, bootstyle=INFO,
                       command=lambda v=valor: self.ir_para_tela_senha(v)).pack(pady=5)

    def configurar_tela_senha(self):
        ttk.Label(self.tela_senha, text="💻 Verificação da senha", font=("Arial", 16)).pack(pady=15)

        self.spin_outro = ttk.Spinbox(self.tela_senha, from_=6, to=64, width=5)
        
        ttk.Label(self.tela_senha, text="Digite sua senha:").pack()
        self.entry_senha = ttk.Entry(self.tela_senha, show="*", width=40)
        self.entry_senha.pack(pady=10)

        ttk.Button(self.tela_senha, text="✅ Verificar", bootstyle=SUCCESS, command=self.verificar_senha).pack(pady=5)

        self.barra_forca = ttk.Progressbar(self.tela_senha, length=400, maximum=100)
        self.barra_forca.pack(pady=10)

        ttk.Label(self.tela_senha, textvariable=self.resultado_var, wraplength=600, justify="left").pack(pady=5)

        ttk.Button(self.tela_senha, text="💾 Exportar Resultado", command=self.exportar_resultado, bootstyle=SECONDARY).pack(pady=5)
        ttk.Button(self.tela_senha, text="🔙 Voltar", command=lambda: self.mostrar_tela(self.tela_contexto), bootstyle=DANGER).pack(pady=5)

    def ir_para_tela_senha(self, contexto):
        self.contexto_var.set(contexto)
        self.entry_senha.delete(0, tk.END)
        self.resultado_var.set("")
        self.barra_forca["value"] = 0

        if contexto == "Outro (defina)":
            messagebox.showinfo("Personalizar", "Defina o mínimo de caracteres na próxima tela.")
            self.spin_outro.pack(pady=5)
        else:
            self.spin_outro.pack_forget()

        self.mostrar_tela(self.tela_senha)

    def verificar_senha(self):
        senha = self.entry_senha.get()
        contexto = self.contexto_var.get()

        minimos = {
            "Sistema comum (8)": 8,
            "Ambiente corporativo (12)": 12,
            "Acesso administrativo/sensível (16)": 16,
            "Wi-Fi pessoal (12)": 12,
            "Outro (defina)": int(self.spin_outro.get()) if self.spin_outro.get() else 8
        }
        minimo = minimos.get(contexto, 8)

        if len(senha) < minimo:
            self.resultado_var.set(f"❌ Sua senha tem {len(senha)} caracteres. Mínimo exigido: {minimo}.")
            self.barra_forca["value"] = 0
            return

        minusculas = sum(1 for c in senha if c in string.ascii_lowercase)
        maiusculas = sum(1 for c in senha if c in string.ascii_uppercase)
        numeros = sum(1 for c in senha if c in string.digits)
        espacos = senha.count(' ')
        especiais = sum(1 for c in senha if c not in string.ascii_letters + string.digits + ' ')

        forca = sum([minusculas > 0, maiusculas > 0, numeros > 0, espacos > 0, especiais > 0])

        feedback = {
            1: "🔴 Muito fraca",
            2: "🟠 Fraca",
            3: "🟡 Razoável",
            4: "🟢 Boa",
            5: "🟢 Excelente!"
        }

        resultado = (
            f"Sua senha contém:\n"
            f"- {minusculas} minúsculas\n"
            f"- {maiusculas} maiúsculas\n"
            f"- {numeros} números\n"
            f"- {espacos} espaços\n"
            f"- {especiais} caracteres especiais\n\n"
            f"Pontuação: {forca}/5 — {feedback[forca]}"
        )

        self.resultado_var.set(resultado)
        self.barra_forca["value"] = forca * 20

    def exportar_resultado(self):
        conteudo = self.resultado_var.get()
        if not conteudo:
            messagebox.showwarning("Nada para salvar", "Analise uma senha antes.")
            return
        caminho = filedialog.asksaveasfilename(defaultextension=".txt",
                                               filetypes=[("Arquivo de texto", "*.txt")])
        if caminho:
            with open(caminho, "w", encoding="utf-8") as f:
                f.write(conteudo)
            messagebox.showinfo("Salvo com sucesso", f"Resultado exportado para:\n{caminho}")


if __name__ == "__main__":
    app = StrongPasswordApp()
    app.mainloop()
